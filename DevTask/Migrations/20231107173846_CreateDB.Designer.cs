// <auto-generated />
using DevTask.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DevTask.Migrations
{
    [DbContext(typeof(DevTaskContext))]
    [Migration("20231107173846_CreateDB")]
    partial class CreateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DevTask.Models.GitHubRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_git_hub_repositories");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_git_hub_repositories_user_id");

                    b.ToTable("git_hub_repositories", (string)null);
                });

            modelBuilder.Entity("DevTask.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("GitHubRepositoryId")
                        .HasColumnType("integer")
                        .HasColumnName("git_hub_repository_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("GitHubRepositoryId")
                        .HasDatabaseName("ix_tasks_git_hub_repository_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tasks_user_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("DevTask.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("GitHubUsername")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("git_hub_username");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DevTask.Models.GitHubRepository", b =>
                {
                    b.HasOne("DevTask.Models.User", "User")
                        .WithMany("GitHubRepositories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_git_hub_repositories_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevTask.Models.Task", b =>
                {
                    b.HasOne("DevTask.Models.GitHubRepository", "GitHubRepository")
                        .WithMany("Tasks")
                        .HasForeignKey("GitHubRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_git_hub_repositories_git_hub_repository_id");

                    b.HasOne("DevTask.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_users_user_id");

                    b.Navigation("GitHubRepository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevTask.Models.GitHubRepository", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DevTask.Models.User", b =>
                {
                    b.Navigation("GitHubRepositories");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
